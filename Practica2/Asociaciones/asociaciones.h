/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _ASOCIACIONES_H_RPCGEN
#define _ASOCIACIONES_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#define TAMSTRING 500

typedef char *clave;

typedef char *valor;

enum Existe {
	Ver = 0,
	Fal = 1,
};
typedef enum Existe Existe;

struct Asociacion {
	clave c;
	valor v;
	struct Asociacion *siguienteAsociacion;
};
typedef struct Asociacion Asociacion;

struct Conjunto {
	int ID;
	Asociacion *a;
	struct Conjunto *siguienteConjunto;
};
typedef struct Conjunto Conjunto;

struct Leer {
	int errno;
	union {
		valor *v;
	} Leer_u;
};
typedef struct Leer Leer;

struct Resultado {
	int errno;
	union {
		Asociacion *resultado;
	} Resultado_u;
};
typedef struct Resultado Resultado;

struct ponerasociacion_1_argument {
	int arg1;
	char *arg2;
	char *arg3;
};
typedef struct ponerasociacion_1_argument ponerasociacion_1_argument;

struct obtenerasociacion_1_argument {
	int arg1;
	char *arg2;
};
typedef struct obtenerasociacion_1_argument obtenerasociacion_1_argument;

struct borrarasociacion_1_argument {
	int arg1;
	char *arg2;
};
typedef struct borrarasociacion_1_argument borrarasociacion_1_argument;

#define ASOCIACION 0x20000001
#define ASOCIACION_VER 1

#if defined(__STDC__) || defined(__cplusplus)
#define ponerAsociacion 1
extern  Existe * ponerasociacion_1(int , char *, char *, CLIENT *);
extern  Existe * ponerasociacion_1_svc(int , char *, char *, struct svc_req *);
#define ObtenerAsociacion 2
extern  Leer * obtenerasociacion_1(int , char *, CLIENT *);
extern  Leer * obtenerasociacion_1_svc(int , char *, struct svc_req *);
#define BorrarAsociacion 3
extern  Existe * borrarasociacion_1(int , char *, CLIENT *);
extern  Existe * borrarasociacion_1_svc(int , char *, struct svc_req *);
#define Enumerar 4
extern  Resultado * enumerar_1(int , CLIENT *);
extern  Resultado * enumerar_1_svc(int , struct svc_req *);
extern int asociacion_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define ponerAsociacion 1
extern  Existe * ponerasociacion_1();
extern  Existe * ponerasociacion_1_svc();
#define ObtenerAsociacion 2
extern  Leer * obtenerasociacion_1();
extern  Leer * obtenerasociacion_1_svc();
#define BorrarAsociacion 3
extern  Existe * borrarasociacion_1();
extern  Existe * borrarasociacion_1_svc();
#define Enumerar 4
extern  Resultado * enumerar_1();
extern  Resultado * enumerar_1_svc();
extern int asociacion_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_clave (XDR *, clave*);
extern  bool_t xdr_valor (XDR *, valor*);
extern  bool_t xdr_Existe (XDR *, Existe*);
extern  bool_t xdr_Asociacion (XDR *, Asociacion*);
extern  bool_t xdr_Conjunto (XDR *, Conjunto*);
extern  bool_t xdr_Leer (XDR *, Leer*);
extern  bool_t xdr_Resultado (XDR *, Resultado*);
extern  bool_t xdr_ponerasociacion_1_argument (XDR *, ponerasociacion_1_argument*);
extern  bool_t xdr_obtenerasociacion_1_argument (XDR *, obtenerasociacion_1_argument*);
extern  bool_t xdr_borrarasociacion_1_argument (XDR *, borrarasociacion_1_argument*);

#else /* K&R C */
extern bool_t xdr_clave ();
extern bool_t xdr_valor ();
extern bool_t xdr_Existe ();
extern bool_t xdr_Asociacion ();
extern bool_t xdr_Conjunto ();
extern bool_t xdr_Leer ();
extern bool_t xdr_Resultado ();
extern bool_t xdr_ponerasociacion_1_argument ();
extern bool_t xdr_obtenerasociacion_1_argument ();
extern bool_t xdr_borrarasociacion_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_ASOCIACIONES_H_RPCGEN */
